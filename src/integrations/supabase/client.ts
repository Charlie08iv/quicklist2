
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wbrgkzijdovhkoklmoei.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndicmdremlqZG92aGtva2xtb2VpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQwMjMyNDksImV4cCI6MjA1OTU5OTI0OX0.GBEzIR5bw66noBmeQ2YWJQt9_h6vOHiBqnFdaV36tn8";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a single instance of the Supabase client to prevent multiple instances warning
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'implicit'
  }
});

// Add a function to check and log the session for debugging
export const getAndLogSession = async () => {
  const { data, error } = await supabase.auth.getSession();
  console.log("Current session:", data.session ? "exists" : "none", 
    data.session?.user?.id || "no user", 
    error || "no error");
  return { data, error };
};

// Export a global function to verify authentication state
export const verifyAuth = async () => {
  const { data, error } = await supabase.auth.getSession();
  if (error) {
    console.error("Auth verification error:", error);
    return { isAuthenticated: false, userId: null, error };
  }
  return { 
    isAuthenticated: !!data.session, 
    userId: data.session?.user?.id || null,
    error: null
  };
};
